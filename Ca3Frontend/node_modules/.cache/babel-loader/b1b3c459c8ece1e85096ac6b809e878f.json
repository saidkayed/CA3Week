{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\sidad\\\\Desktop\\\\JAVA PROG\\\\ReactSecur\\\\reactsec\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\sidad\\\\Desktop\\\\JAVA PROG\\\\ReactSecur\\\\reactsec\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nvar URL = \"http://localhost:8080/jwtbackend\";\n\nfunction handleHttpErrors(res) {\n  if (!res.ok) {\n    return Promise.reject({\n      status: res.status,\n      fullError: res.json()\n    });\n  }\n\n  return res.json();\n}\n\nvar ApiFacade =\n/*#__PURE__*/\nfunction () {\n  function ApiFacade() {\n    var _this = this;\n\n    _classCallCheck(this, ApiFacade);\n\n    this.login = function (user, pass) {\n      var options = _this.makeOptions(\"POST\", true, {\n        username: user,\n        password: pass\n      });\n\n      return fetch(URL + \"/api/login\", options, true).then(handleHttpErrors).then(function (res) {\n        _this.setToken(res.token);\n      });\n    };\n  }\n\n  _createClass(ApiFacade, [{\n    key: \"makeOptions\",\n    value: function makeOptions(method, addToken, body) {\n      var opts = {\n        method: method,\n        headers: {\n          \"Content-type\": \"application/json\",\n          'Accept': 'application/json'\n        }\n      };\n\n      if (addToken && this.loggedIn()) {\n        opts.headers[\"x-access-token\"] = this.getToken();\n      }\n\n      if (body) {\n        opts.body = JSON.stringify(body);\n      }\n\n      return opts;\n    }\n  }]);\n\n  return ApiFacade;\n}();\n\nvar facade = new ApiFacade();\nexport default facade;","map":{"version":3,"sources":["C:\\Users\\sidad\\Desktop\\JAVA PROG\\ReactSecur\\reactsec\\src\\apiFacade.js"],"names":["URL","handleHttpErrors","res","ok","Promise","reject","status","fullError","json","ApiFacade","login","user","pass","options","makeOptions","username","password","fetch","then","setToken","token","method","addToken","body","opts","headers","loggedIn","getToken","JSON","stringify","facade"],"mappings":";;AAAA,IAAMA,GAAG,GAAG,kCAAZ;;AAIA,SAASC,gBAAT,CAA0BC,GAA1B,EAA+B;AAC9B,MAAI,CAACA,GAAG,CAACC,EAAT,EAAa;AACX,WAAOC,OAAO,CAACC,MAAR,CAAe;AAAEC,MAAAA,MAAM,EAAEJ,GAAG,CAACI,MAAd;AAAsBC,MAAAA,SAAS,EAAEL,GAAG,CAACM,IAAJ;AAAjC,KAAf,CAAP;AACD;;AACD,SAAON,GAAG,CAACM,IAAJ,EAAP;AACA;;IAEKC,S;;;;;;;;SAqBLC,K,GAAQ,UAACC,IAAD,EAAOC,IAAP,EAAgB;AACrB,UAAMC,OAAO,GAAG,KAAI,CAACC,WAAL,CAAiB,MAAjB,EAAyB,IAAzB,EAA8B;AAAEC,QAAAA,QAAQ,EAAEJ,IAAZ;AAAkBK,QAAAA,QAAQ,EAAEJ;AAA5B,OAA9B,CAAhB;;AACA,aAAOK,KAAK,CAACjB,GAAG,GAAG,YAAP,EAAqBa,OAArB,EAA8B,IAA9B,CAAL,CACJK,IADI,CACCjB,gBADD,EAEJiB,IAFI,CAEC,UAAAhB,GAAG,EAAI;AAAE,QAAA,KAAI,CAACiB,QAAL,CAAcjB,GAAG,CAACkB,KAAlB;AAA0B,OAFpC,CAAP;AAGD,K;;;;;gCArBUC,M,EAAOC,Q,EAASC,I,EAAM;AAChC,UAAIC,IAAI,GAAG;AACTH,QAAAA,MAAM,EAAEA,MADC;AAETI,QAAAA,OAAO,EAAE;AACP,0BAAgB,kBADT;AAEP,oBAAU;AAFH;AAFA,OAAX;;AAOA,UAAIH,QAAQ,IAAI,KAAKI,QAAL,EAAhB,EAAiC;AAC/BF,QAAAA,IAAI,CAACC,OAAL,CAAa,gBAAb,IAAiC,KAAKE,QAAL,EAAjC;AACD;;AACD,UAAIJ,IAAJ,EAAU;AACRC,QAAAA,IAAI,CAACD,IAAL,GAAYK,IAAI,CAACC,SAAL,CAAeN,IAAf,CAAZ;AACD;;AACD,aAAOC,IAAP;AACD;;;;;;AAUF,IAAMM,MAAM,GAAG,IAAIrB,SAAJ,EAAf;AACA,eAAeqB,MAAf","sourcesContent":["const URL = \"http://localhost:8080/jwtbackend\";\r\n\r\n\r\n\r\nfunction handleHttpErrors(res) {\r\n if (!res.ok) {\r\n   return Promise.reject({ status: res.status, fullError: res.json() })\r\n }\r\n return res.json();\r\n}\r\n\r\nclass ApiFacade {\r\n    \r\n      \r\n     \r\n     \r\n makeOptions(method,addToken,body) {\r\n   var opts = {\r\n     method: method,\r\n     headers: {\r\n       \"Content-type\": \"application/json\",\r\n       'Accept': 'application/json',\r\n     }\r\n   }\r\n   if (addToken && this.loggedIn()) {\r\n     opts.headers[\"x-access-token\"] = this.getToken();\r\n   }\r\n   if (body) {\r\n     opts.body = JSON.stringify(body);\r\n   }\r\n   return opts; \r\n }\r\n login = (user, pass) => {\r\n    const options = this.makeOptions(\"POST\", true,{ username: user, password: pass });\r\n    return fetch(URL + \"/api/login\", options, true)\r\n      .then(handleHttpErrors)\r\n      .then(res => { this.setToken(res.token) })\r\n  }      \r\n}\r\n\r\n\r\nconst facade = new ApiFacade();\r\nexport default facade;"]},"metadata":{},"sourceType":"module"}